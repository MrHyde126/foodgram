name: foodgram workflow

on: [push]
  
jobs:
  tests:
    name: Install dependencies and run flake8 tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.0
    - name: Set up Python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: 3.11
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r backend/foodgram/requirements.txt 
    - name: Test with flake8
      run: |
        python -m flake8
  
  build_and_push_to_docker_hub:
    name: Push Docker images to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2.3.0 
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.7.0
    - name: Login to Docker 
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push backend to Docker Hub
      uses: docker/build-push-action@v4.1.1
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_back:v1
        context: ./backend/foodgram
    - name: Push frontend to Docker Hub
      uses: docker/build-push-action@v4.1.1
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_front:latest
        context: ./frontend
  
  deploy:
    name: Foodgram deployment
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_back:v1
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_front:latest
          cd foodgram-project-react/infra/
          sudo docker compose stop
          sudo docker compose rm backend
          sudo touch .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo NGINX_PORT=${{ secrets.NGINX_PORT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          sudo docker compose up -d
          sudo docker compose exec -T backend python manage.py makemigrations
          sudo docker compose exec -T backend python manage.py migrate
          sudo docker compose exec -T backend python manage.py collectstatic --no-input
  